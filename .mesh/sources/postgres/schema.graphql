schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!
  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node
  """Reads a set of `Director`."""
  allDirectorsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Director`."""
    orderBy: [DirectorsOrderBy!]
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DirectorCondition
  ): [Director!]
  """Reads a set of `Film`."""
  allFilmsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Film`."""
    orderBy: [FilmsOrderBy!]
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FilmCondition
  ): [Film!]
  directorById(id: Int!): Director
  filmById(id: Int!): Film
  filmByTitle(title: String!): Film
  """Reads a single `Director` using its globally unique `ID`."""
  director(
    """The globally unique `ID` to be used in selecting a single `Director`."""
    nodeId: ID!
  ): Director
  """Reads a single `Film` using its globally unique `ID`."""
  film(
    """The globally unique `ID` to be used in selecting a single `Film`."""
    nodeId: ID!
  ): Film
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Director implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
  """Reads and enables pagination through a set of `Film`."""
  filmsByDirectorIdList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Film`."""
    orderBy: [FilmsOrderBy!]
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FilmCondition
  ): [Film!]!
}

type Film implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  title: String!
  year: Int!
  genre: String!
  duration: Int!
  directorId: Int!
  """Reads a single `Director` that is related to this `Film`."""
  directorByDirectorId: Director
}

"""Methods to use when ordering `Film`."""
enum FilmsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  YEAR_ASC
  YEAR_DESC
  GENRE_ASC
  GENRE_DESC
  DURATION_ASC
  DURATION_DESC
  DIRECTOR_ID_ASC
  DIRECTOR_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Film` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FilmCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `title` field."""
  title: String
  """Checks for equality with the object’s `year` field."""
  year: Int
  """Checks for equality with the object’s `genre` field."""
  genre: String
  """Checks for equality with the object’s `duration` field."""
  duration: Int
  """Checks for equality with the object’s `directorId` field."""
  directorId: Int
}

"""Methods to use when ordering `Director`."""
enum DirectorsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Director` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DirectorCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
  """Checks for equality with the object’s `name` field."""
  name: String
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Director`."""
  createDirector(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDirectorInput!
  ): CreateDirectorPayload
  """Creates a single `Film`."""
  createFilm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFilmInput!
  ): CreateFilmPayload
  """Updates a single `Director` using its globally unique id and a patch."""
  updateDirector(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDirectorInput!
  ): UpdateDirectorPayload
  """Updates a single `Director` using a unique key and a patch."""
  updateDirectorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDirectorByIdInput!
  ): UpdateDirectorPayload
  """Updates a single `Film` using its globally unique id and a patch."""
  updateFilm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFilmInput!
  ): UpdateFilmPayload
  """Updates a single `Film` using a unique key and a patch."""
  updateFilmById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFilmByIdInput!
  ): UpdateFilmPayload
  """Updates a single `Film` using a unique key and a patch."""
  updateFilmByTitle(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFilmByTitleInput!
  ): UpdateFilmPayload
  """Deletes a single `Director` using its globally unique id."""
  deleteDirector(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDirectorInput!
  ): DeleteDirectorPayload
  """Deletes a single `Director` using a unique key."""
  deleteDirectorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDirectorByIdInput!
  ): DeleteDirectorPayload
  """Deletes a single `Film` using its globally unique id."""
  deleteFilm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFilmInput!
  ): DeleteFilmPayload
  """Deletes a single `Film` using a unique key."""
  deleteFilmById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFilmByIdInput!
  ): DeleteFilmPayload
  """Deletes a single `Film` using a unique key."""
  deleteFilmByTitle(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFilmByTitleInput!
  ): DeleteFilmPayload
}

"""The output of our create `Director` mutation."""
type CreateDirectorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  """The `Director` that was created by this mutation."""
  director: Director
  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Director` mutation."""
input CreateDirectorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """The `Director` to be created by this mutation."""
  director: DirectorInput!
}

"""An input for mutations affecting `Director`"""
input DirectorInput {
  id: Int
  name: String!
}

"""The output of our create `Film` mutation."""
type CreateFilmPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  """The `Film` that was created by this mutation."""
  film: Film
  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  """Reads a single `Director` that is related to this `Film`."""
  directorByDirectorId: Director
}

"""All input for the create `Film` mutation."""
input CreateFilmInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """The `Film` to be created by this mutation."""
  film: FilmInput!
}

"""An input for mutations affecting `Film`"""
input FilmInput {
  id: Int
  title: String!
  year: Int!
  genre: String!
  duration: Int!
  directorId: Int!
}

"""The output of our update `Director` mutation."""
type UpdateDirectorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  """The `Director` that was updated by this mutation."""
  director: Director
  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateDirector` mutation."""
input UpdateDirectorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """
  The globally unique `ID` which will identify a single `Director` to be updated.
  """
  nodeId: ID!
  """
  An object where the defined keys will be set on the `Director` being updated.
  """
  directorPatch: DirectorPatch!
}

"""
Represents an update to a `Director`. Fields that are set will be updated.
"""
input DirectorPatch {
  id: Int
  name: String
}

"""All input for the `updateDirectorById` mutation."""
input UpdateDirectorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """
  An object where the defined keys will be set on the `Director` being updated.
  """
  directorPatch: DirectorPatch!
  id: Int!
}

"""The output of our update `Film` mutation."""
type UpdateFilmPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  """The `Film` that was updated by this mutation."""
  film: Film
  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  """Reads a single `Director` that is related to this `Film`."""
  directorByDirectorId: Director
}

"""All input for the `updateFilm` mutation."""
input UpdateFilmInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """
  The globally unique `ID` which will identify a single `Film` to be updated.
  """
  nodeId: ID!
  """
  An object where the defined keys will be set on the `Film` being updated.
  """
  filmPatch: FilmPatch!
}

"""Represents an update to a `Film`. Fields that are set will be updated."""
input FilmPatch {
  id: Int
  title: String
  year: Int
  genre: String
  duration: Int
  directorId: Int
}

"""All input for the `updateFilmById` mutation."""
input UpdateFilmByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """
  An object where the defined keys will be set on the `Film` being updated.
  """
  filmPatch: FilmPatch!
  id: Int!
}

"""All input for the `updateFilmByTitle` mutation."""
input UpdateFilmByTitleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """
  An object where the defined keys will be set on the `Film` being updated.
  """
  filmPatch: FilmPatch!
  title: String!
}

"""The output of our delete `Director` mutation."""
type DeleteDirectorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  """The `Director` that was deleted by this mutation."""
  director: Director
  deletedDirectorId: ID
  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteDirector` mutation."""
input DeleteDirectorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """
  The globally unique `ID` which will identify a single `Director` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDirectorById` mutation."""
input DeleteDirectorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Film` mutation."""
type DeleteFilmPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  """The `Film` that was deleted by this mutation."""
  film: Film
  deletedFilmId: ID
  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  """Reads a single `Director` that is related to this `Film`."""
  directorByDirectorId: Director
}

"""All input for the `deleteFilm` mutation."""
input DeleteFilmInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  """
  The globally unique `ID` which will identify a single `Film` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFilmById` mutation."""
input DeleteFilmByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteFilmByTitle` mutation."""
input DeleteFilmByTitleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  title: String!
}

"""
The root subscription type: contains events and live queries you can subscribe to with the `subscription` operation.

#### Live Queries

Live query fields are differentiated by containing `(live)` at the end of their
description, they are added for each field in the `Query` type. When you
subscribe to a live query field, the selection set will be evaluated and sent to
the client, and then most things\* that would cause the output of the selection
set to change will trigger the selection set to be re-evaluated and the results
to be re-sent to the client.

_(\* Not everything: typically only changes to persisted data referenced by the query are detected, not computed fields.)_

Live queries can be very expensive, so try and keep them small and focussed.

#### Events

Event fields will run their selection set when, and only when, the specified
server-side event occurs. This makes them a lot more efficient than Live
Queries, but it is still recommended that you keep payloads fairly small.
"""
type Subscription {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form. (live)
  """
  query: Query!
  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`. (live)
  """
  nodeId: ID!
  """Fetches an object given its globally unique `ID`. (live)"""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node
  """Reads a set of `Director`. (live)"""
  allDirectorsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Director`."""
    orderBy: [DirectorsOrderBy!]
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DirectorCondition
  ): [Director!]
  """Reads a set of `Film`. (live)"""
  allFilmsList(
    """Only read the first `n` values of the set."""
    first: Int
    """Skip the first `n` values."""
    offset: Int
    """The method to use when ordering `Film`."""
    orderBy: [FilmsOrderBy!]
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FilmCondition
  ): [Film!]
  """ (live)"""
  directorById(id: Int!): Director
  """ (live)"""
  filmById(id: Int!): Film
  """ (live)"""
  filmByTitle(title: String!): Film
  """Reads a single `Director` using its globally unique `ID`. (live)"""
  director(
    """The globally unique `ID` to be used in selecting a single `Director`."""
    nodeId: ID!
  ): Director
  """Reads a single `Film` using its globally unique `ID`. (live)"""
  film(
    """The globally unique `ID` to be used in selecting a single `Film`."""
    nodeId: ID!
  ): Film
}